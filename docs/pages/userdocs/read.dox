/**
 * \page read_page Reading data
 *
 * \tableofcontents
 *
 * Reading data from an existing NWB file via AqNWB consists of the following main steps:
 *
 * 1. \ref read_example_open  by creating and opening a read I/O object for the file.
 * 2. \ref read_example_registered_type  by constructing the corresponding 
 *    \ref AQNWB::NWB::RegisteredType "RegisteredType" class to represent the 
 *    ``neurodata_type`` ,  e.g., \ref AQNWB::NWB::NWBFile "NWBFile" or
 *    \ref AQNWB::NWB::ElectricalSeries "ElectricalSeries".      
 * 3. \ref read_example_read by creating a \ref AQNWB::IO::ReadDataWrapper "ReadDataWrapper" 
 *    wrapper object for lazy read access to the particular dataset or attribute field.
 * 4. Using  \ref AQNWB::IO::ReadDataWrapper::values "ReadDataWrapper::values"  we can then request the parts of 
 *    the data of interest, at which point the data is being loaded from disk 
 *    and returned as a \ref AQNWB::IO::DataBlock "DataBlock", which contains a 1D vector with the 
 *    \ref AQNWB::IO::DataBlock::data "data" and the \ref AQNWB::IO::DataBlock::shape "shape" of the data.
 *
 * \section read_example_open Opening an existing file for reading
 *
 * \snippet tests/examples/test_ecephys_data_read.cpp example_read_new_io_snippet
 *
 * \par References:
 * See \ref AQNWB::createIO "createIO" and \ref AQNWB::IO::HDF5::HDF5IO "HDF5IO"
 *
 *
 * \section read_example_registered_type Reading NWB neurodata_types
 *
 * \subsection read_example_predefined_registered_type Reading known RegisteredType objects
 *
 * When the path and type of objects is fixed in the schema (or we know them based on other conventions),
 * then we can read the types directly from the file. E.g., here we first read the 
 * \ref AQNWB::NWB::NWBFile "NWBFile" directly, which we know exists at the root "/" 
 * of the file. We then read the \ref AQNWB::NWB::ElectrodeTable "ElectrodeTable"
 * via the predefined \ref AQNWB::NWB::NWBFile::readElectrodeTable "NWBFile::readElectrodeTable"
 * method. The advantage of this approach is that we do not need to manually specify paths
 * or object types. Similarly, when we read the `locations` columns, we do not need to
 * specify the name or the data type to use. 
 *
 * \snippet tests/examples/test_ecephys_data_read.cpp example_read_predefined_types
 *
 * \subsection read_example_search Searching for RegisteredType objects
 *
 * When paths are not fixed, we can use the \ref AQNWB::IO::BaseIO::findTypes "findTypes()" function of our I/O object to
 * conveniently search for objects with a given type.
 *
 * \snippet tests/examples/test_ecephys_data_read.cpp example_search_types_snippet
 *
 * \note
 * Any \ref AQNWB::NWB::RegisteredType "RegisteredType" (such as our 
 * \ref AQNWB::NWB::NWBFile "NWBFile") object) provides the convenience method 
 * \ref AQNWB::NWB::RegisteredType::findOwnedTypes "findOwnedTypes" which uses 
 * \ref AQNWB::IO::BaseIO::findTypes "findTypes()" to search within the given object
 * (so that we don't need to specify the path argument). 
 * By default, \ref AQNWB::NWB::RegisteredType::findOwnedTypes "findOwnedTypes" uses the 
 * \ref AQNWB::IO::SearchMode::STOP_ON_TYPE "STOP_ON_TYPE" mode, i.e., the search does not
 * recurse further into defined types (hence, returning only data elements that
 * the object owns directly). Alternatively, we can set the search mode to 
 * \ref AQNWB::IO::SearchMode::CONTINUE_ON_TYPE "CONTINUE_ON_TYPE" to 
 * search recursively through all types (here the whole file since we started at the root ``"/"``).
 *
 * \warning
 * The current implementation of \ref AQNWB::IO::BaseIO::findTypes "findTypes()" is
 * not aware of inheritance but searches for exact matches of types only.
 * However, we can search for objects of multiple different times at the same time by
 * specifying multiple types to search for in our ``typesToSearch``.
 *
 * The ``found_electrical_series`` provides us with a map where each key is the 
 * path to an object and its corresponding value is the type of the object. 
 * Using this information we can read the ``neurodata_type`` objects from the file via the
 * \ref AQNWB::NWB::RegisteredType::create "RegisteredType::create" factory methods
 * to conveniently construct an instance of the corresponding class in AqNWB.
 *
 * \snippet tests/examples/test_ecephys_data_read.cpp example_read_only_snippet
 *
 * \note 
 * \ref AQNWB::IO::BaseIO::findTypes "findTypes" does not guarantee that objects are
 * returned in any particular order. Instead of retrieving the first object via 
 * ``found_electrical_series.begin()->first;``  we here fix the ``esdata_path`` path
 * variable to ensure consistent behavior of the tutorial across platforms. 
 *
 * \par
 * \note
 * \ref AQNWB::NWB::RegisteredType::create "RegisteredType::create" comes in a few
 * different flavors:
 * 1. When passing the 1) ``path`` and 2) ``io``, and 3) specifying the type as a 
 *   template parameter (as in the example above), the instance is being constructed using 
 *   the common constructor and we get a pointer to the specific type directly. 
 *   I.e., the above example is equivalent to creating the object via 
 *   ``auto readElectricalSeries = ElectricalSeries(path, io)``.
 * 2. When passing only 1) ``path`` and 2) ``io``, AqNWB
 *    reads the ``neurodata_type`` and ``namespace`` attributes from the NWB file to
 *    determine the type to use (e.g., \ref AQNWB::NWB::ElectricalSeries "ElectricalSeries") 
 *    and then returns  generated instance is then returned as 
 *    a generic \ref AQNWB::NWB::RegisteredType "RegisteredType" pointer
 *    that we can then cast to the specific type if necessary, e.g., via 
 *    ``auto readElectricalSeries = std::dynamic_pointer_cast<AQNWB::NWB::ElectricalSeries>(readRegisteredType);``. 
 * 3. When passing the 1) ``fullname`` (e.g., ``core::ElectricalSeries``), 
 *    2) ``path`` and 3) ``io``, the behavior is the same as in option 2, but 
 *    we avoid reading the type ``neurodata_type`` and ``namespace`` attributes from 
 *    the file to determine the type. This option is useful when we used
 *    \ref AQNWB::IO::BaseIO::findTypes "findTypes", since we have
 *    already determined the type information during the search, so that we can use 
 *    ``found_electrical_series.begin()->second`` to set the ``fullname``.
 *
 * \section read_example_read Reading data from RegisteredType objects
 *
 * Now we can read fields and subsets of data from the fields
 *
 * \subsection read_design_example_read_posthoc_read_field Reading predefined data fields
 *
 * For fields with a predefined, fixed name in the schema, AQNWB provides read 
 * methods for convenient access to such common data fields.
 *
 * \snippet tests/examples/test_ecephys_data_read.cpp example_read_only_fields_snippet
 *
 * \snippet tests/examples/test_ecephys_data_read.cpp example_read_only_datasubset_snippet
 *
 * \snippet tests/examples/test_ecephys_data_read.cpp example_read_only_stringattr_snippet
 *
 * \note 
 * For attributes, slicing is disabled at compile time since attributes are intended for small data only.
 *
 * \subsection read_example_arbitrary Reading arbitrary fields
 *
 * Even if there is no dedicated `DEFINE_ATTRIBUTE_FIELD` or `DEFINE_DATASET_FIELD` definition available, we can still read 
 * any arbitrary sub-field associated with a particular \ref AQNWB::NWB::RegisteredType "RegisteredType"
 * via the generic \ref AQNWB::NWB::RegisteredType::readField "RegisteredType::readField" method.
 * For example, to read the data from the \ref AQNWB::NWB::ElectricalSeries "ElectricalSeries":
 *
 * \snippet tests/examples/test_ecephys_data_read.cpp example_read_generic_dataset_field_snippet
 *
 * \note
 * Using this approach, we need to specify the  template parameters to use with the 
 * \ref AQNWB::IO::ReadDataWrapper "ReadDataWrapper", i.e.: 
 *    - ``OTYPE``: specifies the type of object being wrapped (\ref AQNWB::Types::StorageObjectType)
 *    - ``VTYPE``: defines the value type of the data
 *
 * \warning 
 * In particular for fields that are optional, it is useful to first check that the field
 * actually exists via \ref AQNWB::IO::ReadDataWrapper::exists "ReadDataWrapper::exists".
 *
 * Similarly, we can also read any sub-fields that are themselves \ref AQNWB::NWB::RegisteredType "RegisteredType"
 * objects:
 *
 * \snippet tests/examples/test_ecephys_data_read.cpp example_read_generic_registeredtype_field_snippet
 *
 * \note 
 * Even though we here do not specify the template parameter for \ref AQNWB::NWB::RegisteredType::create "RegisteredType::create",
 * the function still creates the correct type by reading the type information from the NWB file, 
 * however, because we do not specify the type, the function returns the object as a pointer 
 * of \ref AQNWB::NWB::RegisteredType "RegisteredType", that we can then subsequently cast to the 
 * approbriate type if necessary. 
 *
 * \subsection read_example_variant_data Working with fields with unknown data type 
 *
 * C++ is a statically typed language, i.e., we need to know the type of every variable at compile time. 
 * This can be particularly challenging when reading data from disk where the data type may not be 
 * known before-hand. AqNWB helps us here by allocating memory and determining data types for us 
 * when reading data fields. However, when we want to compute on the data, we still need to know
 * the data type, e.g., to use the typed \ref AQNWB::IO::DataBlock "DataBlock<DTYPE>" we need to know 
 * the DTYPE.
 *
 * Using [std::variant](https://en.cppreference.com/w/cpp/utility/variant) with 
 * [std::visit](https://en.cppreference.com/w/cpp/utility/variant/visit) (introduced in C++17) 
 * provides an alternative approach, that can help us avoid having to write complex `switch/case` 
 * statements to check for all possible types when we don't know the data type beforehand. 
 * E.g., using `std::visit` we can define a set of functions to compute the mean for 
 * any 1D `std::vector`:
 *
 * \snippet tests/examples/test_ecephys_data_read.cpp  example_compute_mean_from_variant
 *
 * Using \ref AQNWB::IO::DataBlockGeneric::as_variant "DataBlockGeneric::as_variant" we can then
 * cast our data to a \ref AQNWB::IO::BaseDataType::BaseDataVectorVariant "BaseDataVectorVariant", 
 * which is am `std::variant` representing a 1D `std::vector` containing values of any valid 
 * \ref AQNWB::IO::BaseDataType "BaseDataType". We can then using our `compute_mean` methods to
 * conveniently compute on the data without having to explicitly specify the type of the data 
 * ourselves. 
 *
 * \snippet tests/examples/test_ecephys_data_read.cpp  example_use_std_variant_to_compute_on_data
 * 
 *
 * \section read_further_reading Further reading
 * - \ref read_design_page discusses the underlying software design of AqNWB for data read 
 * - \ref registered_type_page discusses how to implement your own \ref AQNWB::NWB::RegisteredType "RegisteredType"
 *    classes for reading and writing data 
 * - ``demo/inspect_electrical_series`` in the [AqNWB repo](https://github.com/NeurodataWithoutBorders/aqnwb)
 *     contains a demo program that illustrates the use of AqNWB for inspecticing `ElectricalSeries` 
 *     data in an arbitrary NWB file.
 */
