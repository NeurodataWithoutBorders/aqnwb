/**
 * \page read_page Reading data
 *
 * \tableofcontents
 *
 * \section read_intro Introduction
 *
 * Reading data from an open NWB file via AqNWB consists of the following main steps:
 *
 * 1. Create the I/O object to read the file and open the file for read 
 *    \code
 *       auto io = createIO("HDF5", path);
 *       io->open(FileMode::ReadOnly);
 *    \endcode 
 * 2. Construct the container object for the ``neurodata_type`` (e.g., a ``ElectricalSeries``) for read
 *    via the \ref AQNWB::NWB::RegisteredType::create "RegisteredType::create" factory method, e.g.,
 *    \code
 *        auto electricalSeries = RegisteredType::create<ElectricalSeries>(electricalSeriesPath, io);
 *    \endcode 
 *    \note Many classes in AqNWB provide convenient read methods to access to specific objects, e.g., 
 *          \ref AQNWB::NWB::NWBFile::readElectrodeTable "NWBFile::readElectrodeTable" so that we 
 *          do not need to specify the ``path``, ``type``, and ``io``. Alternatively, we can also 
 *          construct the container for read directly, e.g., via  ``auto es = ElectricalSeries>(electricalSeriesPath, io)``.
 *          
 * 3. Access a dataset or attribute for read by retrieving a  \ref AQNWB::IO::ReadDataWrapper "ReadDataWrapper" 
 *    wrapper object that provides lazy read access to the particular dataset or attribute.
 *    \snippet tests/examples/test_ecephys_data_read.cpp example_read_get_data_wrapper_snippet
 *    \note For attributes, slicing is disabled at compile time since attributes are intended for small data only.
 * 4. Request the parts of the data of interest, at which point the data is being loaded from disk 
 *    and returned as a \ref AQNWB::IO::DataBlock "DataBlock", which stores a 1D vector with the 
 *    \ref AQNWB::IO::DataBlock::data "data", the \ref AQNWB::IO::DataBlock::shape "shape" of the data,
 *    and provides convenience methods for interacting with the data, e.g., \ref AQNWB::IO::DataBlock::as_multi_array
 *    \snippet tests/examples/test_ecephys_data_read.cpp example_read_get_datablock_snippet
 *
 * \section read_example Example
 *
 * \subsection read_example_open Opening an existing file for reading
 *
 * \snippet tests/examples/test_ecephys_data_read.cpp example_read_new_io_snippet
 *
 * \subsection read_example_predefined Reading known RegisteredType objects
 *
 * When the path and type of objects is fixed in the schema (or we know them based on other conventions),
 * then we can read the types directly from the file. E.g., here we first read the 
 * \ref AQNWB::NWB::NWBFile "NWBFile" directly, which we know exists at the root "/" 
 * of the file. We then read the \ref AQNWB::NWB::ElectrodeTable "ElectrodeTable"
 * via the predefined \ref AQNWB::NWB::NWBFile::readElectrodeTable "NWBFile::readElectrodeTable"
 * method. The advantage of this approach is that we do not need to manually specify paths
 * or object types. Similarly, when we read the `locations` columns, we do not need to
 * specify the name or the data type to use. 
 *
 * \snippet tests/examples/test_ecephys_data_read.cpp example_read_predefined_types
 *
 * \subsection read_example_search Searching for RegisteredType objects
 *
 * When paths are not fixed, we can use the \ref AQNWB::IO::BaseIO::findTypes "findType()" function of our I/O object to
 * conveniently search for objects with a given type.
 *
 * \snippet tests/examples/test_ecephys_data_read.cpp example_search_types_snippet
 *
 * \note
 * \ref AQNWB::IO::BaseIO::findTypes "findType()" supports two main search modes.
 * Using \ref AQNWB::IO::SearchMode::CONTINUE_ON_TYPE "CONTINUE_ON_TYPE" mode we
 * can search recursively through all types (here the whole file since we started at the root ``"/"``).
 * Using  \ref AQNWB::IO::SearchMode::STOP_ON_TYPE "STOP_ON_TYPE" does not
 * recurse further into defined types, hence, this mode is useful if we only
 * want to search for objects that the object at the starting path manages
 * directly.
 *
 * \warning
 * The current implementation of \ref AQNWB::IO::BaseIO::findTypes "findType()" is
 * not aware of inheritance but searches for exact matches of types only.
 * However, we can search for objects of multiple different times at the same time by
 * specifying multiple types to search for in our ``typesToSearch``.
 *
 * \subsection read_example_read Reading data from RegisteredType objects
 *
 * To read from a ``neurodata_type`` object from an existing file, we can use the
 * \ref AQNWB::NWB::RegisteredType::create "RegisteredType::create" factory methods
 * to conveniently construct an instance of the corresponding class in AqNWB.
 *
 * \snippet tests/examples/test_ecephys_data_read.cpp example_read_only_snippet
 *
 * \note
 * \ref AQNWB::NWB::RegisteredType::create "RegisteredType::create" comes in a few
 * different flavors:
 * 1. When passing only 1) ``path`` and 2) ``io`` (as in the example above), AqNWB
 *    reads the ``neurodata_type`` and ``namespace`` attributes from the NWB file to
 *    automatically determine the class to use to represent the type.
 * 2. When passing the 1) ``fullname`` (e.g., ``core::ElectricalSeries``),  2) ``path`` and 3) ``io``
 *    AqNWB looks up the class to use in \ref AQNWB::NWB::RegisteredType "RegisteredType's" type
 *    registry (see also \ref use_registered_type_registry )
 * 3. When passing the class to use as template parameter, e.g.,
 *    ``create<AQNWB::NWB::ElectricalSeries>(path, io);`` the
 *    instance is being constructed using the common constructor, i.e., this
 *    is equivalent to creating the object via ``ElectricalSeries(path, io)``
 * Option 1 and 2 instantiates the specific type (e.g., ``ElectricalSeries``) but return
 * a generic \ref AQNWB::NWB::RegisteredType "RegisteredType" pointer that we can
 * cast to the specific type if necessary, e.g., via 
 * ``auto readElectricalSeries = std::dynamic_pointer_cast<AQNWB::NWB::ElectricalSeries>(readRegisteredType);``. 
 * Option 3 creates and returns a pointer to the specific type directly.
 *
 * \subsubsection read_design_example_read_posthoc_read_field Reading data fields
 *
 * Now we can read fields and subsets of data from the fields:
 *
 * \snippet tests/examples/test_ecephys_data_read.cpp example_read_only_fields_snippet
 *
 * \snippet tests/examples/test_ecephys_data_read.cpp example_read_only_datasubset_snippet
 *
 * \snippet tests/examples/test_ecephys_data_read.cpp example_read_only_stringattr_snippet
 *
 * \note
 * When working with data in AqNWB, you need to know the data type (e.g., `float`, `int`) at compile time
 * since C++ is a strongly typed language. For example, when using \ref AQNWB::IO::DataBlock "DataBlock",
 * you need to specify the data type. And if you want to use \ref AQNWB::IO::DataBlock::as_multi_array "DataBlock.as_multi_array",
 * you also need to know the number of dimensions at compile time.
 *
 * \subsection read_example_arbitrary Reading arbitrary fields
 *
 * Even if there is no dedicated `DEFINE_FIELD` definition available, we can still read 
 * any arbitrary sub-field associated with a particular \ref AQNWB::NWB::RegisteredType "RegisteredType"
 * via the generic \ref AQNWB::NWB::RegisteredType::readField "RegisteredType::readField" method.
 * For example, to read the data from the \ref AQNWB::NWB::ElectricalSeries "ElectricalSeries":
 *
 * \snippet tests/examples/test_ecephys_data_read.cpp example_read_generic_dataset_field_snippet
 *
 * \note
 * Using this approach, we need to specify the  template parameters to use with the 
 * \ref AQNWB::IO::ReadDataWrapper "ReadDataWrapper", i.e.: 
 *    - ``OTYPE``: specifies the type of object being wrapped (\ref AQNWB::Types::StorageObjectType)
 *    - ``VTYPE``: defines the value type of the data
 *
 * Similarly, we can also read any sub-fields that are themselves \ref AQNWB::NWB::RegisteredType "RegisteredType"
 * objects:
 *
 * \snippet tests/examples/test_ecephys_data_read.cpp example_read_generic_registeredtype_field_snippet
 *
 * @note 
 * Even though we here do not specify the template parameter for \ref AQNWB::NWB::RegisteredType::create "RegisteredType::create",
 * the function still creates the correct type by reading the type information from the NWB file, 
 * however, because we do not specify the type, the function returns the object as a pointer 
 * of \ref AQNWB::NWB::RegisteredType "RegisteredType", that we can then subsequently cast to the 
 * approbriate type if necessary. 
 */
