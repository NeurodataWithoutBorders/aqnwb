/**
 * @page install_page Installing AqNWB
 *
 * \section requirements Requirements
 * - A C++17-compliant compiler
 * - CMake >= 3.15
 * - HDF5 >= 1.10
 * - Boost
 * - Additional requirements for building the documentation (optional)
 *   - Doxygen
 *   - Graphviz
 * - Additional requirements for developers (mode `dev`)
 *   - cppcheck
 *   - clang-format
 *
 * \section userbuild_sec User Build
 *
 * \subsection userbuild_build_subsec Build
 *
 * Here are the steps for building in release mode with a multi-configuration generator:
 *
 * \code{.sh}
 * cmake -S . -B build
 * cmake --build build --config Release
 * \endcode
 *
 * Note, if you are using custom installations of HDF5 or BOOST that are not being detected
 * automatically by cmake, you can specify `HDF5_ROOT` and `BOOST_ROOT` environment variables to
 * point to install directories of HDF5 and BOOST respectively.
 *
 * \subsection userbuild_install_subsec Install
 *
 * Here is the command for installing the release mode artifacts with a
 * multi-configuration generator:
 *
 * \code{.sh}
 * cmake --install build --config Release
 * \endcode
 *
 *
 *
 * \section devbuild_sec Developer Build
 *
 * Build system targets that are only useful for developers of AqNWB are
 * hidden if the `aq-nwb_DEVELOPER_MODE` option is disabled. Enabling this
 * option makes tests and other developer targets and options available. You can enable
 * the option when configuring the build by adding `-Daq-nwb_DEVELOPER_MODE=ON`, e.g.,
 *
 * \code{.sh}
 * cmake -S . -B build -Daq-nwb_DEVELOPER_MODE=ON
 * \endcode
 *
 * \subsection  devbuild_presets_subsec Presets
 *
 * As a developer, you can create your own dev preset by making a `CMakeUserPresets.json` file at the root of
 * the project:
 *
 * \code{.json}
 * {
 *   "version": 2,
 *   "cmakeMinimumRequired": {
 *     "major": 3,
 *     "minor": 15,
 *     "patch": 0
 *   },
 *   "configurePresets": [
 *     {
 *       "name": "dev",
 *       "binaryDir": "${sourceDir}/build/dev",
 *       "inherits": ["dev-mode", "ci-<os>"],
 *       "cacheVariables": {
 *         "CMAKE_BUILD_TYPE": "Debug"
 *       }
 *     }
 *   ],
 *   "buildPresets": [
 *     {
 *       "name": "dev",
 *       "configurePreset": "dev",
 *       "configuration": "Debug"
 *     }
 *   ],
 *   "testPresets": [
 *     {
 *       "name": "dev",
 *       "configurePreset": "dev",
 *       "configuration": "Debug",
 *       "output": {
 *         "outputOnFailure": true
 *       }
 *     }
 *   ]
 * }
 * \endcode
 * Replace `<os>` in the `CMakeUserPresets.json` file with the name of
 * the operating system you have (`win64`, `linux` or `darwin`).
 *
 * \subsection configure_build_test Configure, build and test
 *
 * You can configure, build and test the project respectively with the following commands from the project root on
 * any operating system with any build system:
 *
 * \code{.sh}
 * cmake --preset=dev
 * cmake --build --preset=dev
 * ctest --preset=dev
 * \endcode
 *
 * \subsection devbuild_dev_mode_targets_subsec Developer mode targets
 *
 * Additional targets can be invoked when in development mode using the commands below
 *
 * \code{.sh}
 * cmake --build --preset=dev --target=<name of the target>
 * \endcode
 *
 * \subsubsection  devbuild_target_options_subsubsec Target options
 * - `format-check` and `format-fix`: run the clang-format tool on the codebase to check errors and to fix them respectively.
 * - `spell-check` and `spell-fix`: run the codespell tool on the codebase to check errors and to fix them respectively.
 * - `docs` : builds the documentation using Doxygen. (Note: run `cmake --preset=dev -DBUILD_DOCS=ON` before building to add docs target)
 */




 */
