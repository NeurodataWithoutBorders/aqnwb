/**
 * @page dev_install_page Installation & Setup
 *
 * \section dev_requirements_sec Requirements
 *
 * Please ensure that the required libraries described in the
 * \ref requirements "Requirements" section are installed. For developers we recommend
 * to also install optional dependencies to ease development.
 *
 * \section devbuild_sec Developer Build
 *
 * Build system targets that are only useful for developers of AqNWB are
 * hidden if the `aq-nwb_DEVELOPER_MODE` option is disabled. Enabling this
 * option makes \ref testing "tests" and other developer targets and options available. You can enable
 * the option when configuring the build by adding `-Daq-nwb_DEVELOPER_MODE=ON`, e.g.,
 *
 * \code{.sh}
 * cmake -S . -B build -Daq-nwb_DEVELOPER_MODE=ON
 * \endcode
 *
 * \note
 * If you are using custom installations of **HDF5** or **BOOST** that are not being detected
 * automatically by cmake, you can specify `HDF5_ROOT` and `BOOST_ROOT` environment variables to
 * point to install directories of HDF5 and BOOST respectively.
 *
 * \section  devbuild_presets_subsec Developer Presets
 *
 * As a developer, you can create your own dev preset by making a `CMakeUserPresets.json` file at the root of
 * the project:
 *
 * \code{.json}
 * {
 *   "version": 2,
 *   "cmakeMinimumRequired": {
 *     "major": 3,
 *     "minor": 15,
 *     "patch": 0
 *   },
 *   "configurePresets": [
 *     {
 *       "name": "dev",
 *       "binaryDir": "${sourceDir}/build/dev",
 *       "inherits": ["dev-mode", "ci-<os>"],
 *       "cacheVariables": {
 *         "CMAKE_BUILD_TYPE": "Debug"
 *       }
 *     }
 *   ],
 *   "buildPresets": [
 *     {
 *       "name": "dev",
 *       "configurePreset": "dev",
 *       "configuration": "Debug"
 *     }
 *   ],
 *   "testPresets": [
 *     {
 *       "name": "dev",
 *       "configurePreset": "dev",
 *       "configuration": "Debug",
 *       "output": {
 *         "outputOnFailure": true
 *       }
 *     }
 *   ]
 * }
 * \endcode
 * Replace `<os>` in the `CMakeUserPresets.json` file with the name of
 * the operating system you have (`win64`, `linux` or `darwin`).
 *
 * \subsection configure_build_test Configure, Build and Test
 *
 * You can configure, build and test the project respectively with the following commands from the project root on
 * any operating system with any build system:
 *
 * \code{.sh}
 * cmake --preset=dev
 * cmake --build --preset=dev
 * ctest --preset=dev
 * \endcode
 *
 * \section devbuild_dev_mode_targets_subsec Developer Mode Targets
 *
 * Additional targets can be invoked when in development mode using the commands below
 *
 * \code{.sh}
 * cmake --build --preset=dev --target=<name of the target>
 * \endcode
 *
 * \subsubsection  devbuild_target_options_subsubsec Target options
 * - `format-check`: run the `clang-format` tool on the codebase to check for formatting errors
 * - `format-fix` :  run the `clang-format` tool on the codebase with `FIX=YES` to both check and automatically fix for formatting errors
 * - `spell-check`: run the `codespell` tool on the codebase to check for common spelling errors
 * - `spell-fix` :  run the `codespell` tool on the codebase with `FIX=YES` to both check and automatically fix  common spelling errors
 * - `docs` : builds the documentation using Doxygen. (Note: run `cmake --preset=dev -DBUILD_DOCS=ON` before building to add docs target)
 */

