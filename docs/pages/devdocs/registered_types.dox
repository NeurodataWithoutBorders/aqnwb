/**
 *
 * \page registered_type_page Implementing a new Neurodata Type
 *
 * \tableofcontents
 *
 *
 * New neurodata_types typically inherit from at least either \ref AQNWB::NWB::Container "Container"
 * or \ref AQNWB::NWB::Data "Data", or a more specialized type of the two. In any case,
 * all classes that represent a ``neurodata_type`` defined in the schema should be implemented
 * as a subtype of \ref AQNWB::NWB::RegisteredType "RegisteredType". Here we focus on how 
 * to implement new subclasses of \ref AQNWB::NWB::RegisteredType "RegisteredType". 
 * If you want to learn more about the how \ref AQNWB::NWB::RegisteredType "RegisteredType" 
 * manages types and implements data read then please see \ref read_design_page.
 *
 * @section implement_registered_type How to Implement a RegisteredType
 *
 * To implement a subclass of \ref AQNWB::NWB::RegisteredType "RegisteredType", follow these steps:
 *
 * 1. Include the `RegisteredType.hpp` header file in your subclass header file (or the header of your
 *    more specific parent class that inherits from  \ref AQNWB::NWB::RegisteredType "RegisteredType").
 *    @code
 *    #include "nwb/RegisteredType.hpp"
 *    @endcode
 *
 * 2. Define your subclass by inheriting from \ref AQNWB::NWB::RegisteredType "RegisteredType" (or
 *    one of its child classes). Ensure that your subclass implements a constructor with the arguments
 *    `(const std::string& path, std::shared_ptr<IO::BaseIO> io)`,
 *    as the  \ref AQNWB::NWB::RegisteredType::create "RegisteredType::create" method 
 *    expects this constructor signature.
 *    @code
 *    class MySubClass : public AQNWB::NWB::RegisteredType {
 *    public:
 *        MySubClass(const std::string& path, std::shared_ptr<IO::BaseIO> io)
 *            : RegisteredType(path, io) {}
 *
 *        // Implement any additional methods or overrides here
 *    };
 *    @endcode
 *
 * 3. Use the \ref REGISTER_SUBCLASS macro to prepare your subclass for registration with
 *    the class registry defined by \ref AQNWB::NWB::RegisteredType "RegisteredType". This should usually appear in
 *    the header (`hpp`) file as part of the class definition:
 *    @code
 *    REGISTER_SUBCLASS(MySubClass, "my-namespace")
 *    @endcode
 *
 * 4. In the corresponding source (`cpp`) file, initialize the static member to trigger the registration
 *    using the \ref REGISTER_SUBCLASS_IMPL macro:
 *    @code
 *    #include "MySubClass.h"
 *
 *    // Initialize the static member to trigger registration
 *    REGISTER_SUBCLASS_IMPL(MySubClass)
 *    @endcode
 *
 * 5. To define getter methods for lazy read access to datasets and attributes that belong to our type,
 *    we can use the \ref DEFINE_FIELD  macro. This macro creates a standard method for retrieving a
 *    \ref AQNWB::IO::ReadDataWrapper "ReadDataWrapper" for lazy reading for the field:
 *    @code
 *    DEFINE_FIELD(getData, DatasetField, float, "data", The main data)
 *    @endcode
 *
 * 6. Similarly, we use the \ref DEFINE_REGISTERED_FIELD macro to define getter methods for other 
 *    \ref AQNWB::NWB::RegisteredType "RegisteredType" objects that we own, such as a
 *     \ref AQNWB::NWB::ElectrodeTable "ElectrodeTable" that owns 
 *    predefined \ref AQNWB::NWB::VectorData "VectorData" columns:
 *    @code
 *    DEFINE_REGISTERED_FIELD(readGroupNameColumn, VectorData<std::string>, "group_name", "the name of the ElectrodeGroup")
 *    @endcode
 *
 * 7. When inheriting from the more specific  \ref AQNWB::NWB::Container "Container"
 *    or \ref AQNWB::NWB::Data "Data" types, then we will typically also need to implement an ``initialize`` 
 *    method, which is responsible for creating the relevant Groups, Datasets, and Attributes
 *    in the file for data write. Remember to also call the  ``initialize``  method of the
 *    parent class.
 *
 *
 * \note
 * ``DEFINE_FIELD`` and ``DEFINE_REGISTERED_FIELD`` create templated, non-virtual read 
 * functions. This means if we want to "redefine" a field in a child class by calling 
 * ``DEFINE_FIELD`` again, then the function will be "hidden" instead of "override". 
 * This is important to remember when casting a pointer to a base type, as in this case 
 * the implementation from the base type will be used since the function created 
 * by ``DEFINE_FIELD`` is not virtual.
 *
 *
 * @subsection implement_registered_type_example Example: Implementing a new type
 *
 * *MySubClass.hpp*
 * @code
 * #pragma once
 * #include "RegisteredType.hpp"
 *
 * class MySubClass : public AQNWB::NWB::RegisteredType
 * {
 * public:
 *     MySubClass(const std::string& path, std::shared_ptr<IO::BaseIO> io)
 *         : RegisteredType(path, io) {}
 *
 *     DEFINE_FIELD(getData, DatasetField, float, "data", The main data)
 *
 *     REGISTER_SUBCLASS(MySubClass, "my-namespace")
 * };
 * @endcode
 *
 * *MySubClass.cpp*
 * @code
 * #include "MySubClass.h"
 *
 * // Initialize the static member to trigger registration
 * REGISTER_SUBCLASS_IMPL(MySubClass)
 * @endcode
 *
 *
  * \warning
 * To ensure proper function on read, the name of the class should match the name of the
 * ``neurodata_type`` as defined in the schema. Similarly, "my-namespace" should match
 * the name of the namespace in the schema (e.g., "core", "hdmf-common"). In this way
 * we can look up the corresponding class for an object in a file based on the
 * ``neurodata_type`` and ``namespace`` attributes stored in the file.
 * A special version of the ``REGISTER_SUBCLASS`` macro, called ``REGISTER_SUBCLASS_WITH_TYPENAME``,
 * allows setting the typename explicitly as a third argument. This is for the **special case**
 * where the name of the class cannot be the same as the name of the type (e.g,. when implementing
 * a class that doesn't have an assigned type in the schema or a class that requires
 * template parameters that are not part of the type name). See \ref using_registered_subclass_with_typename
 * for details. 
 *
 * \subsection use_the_define_field_macro DEFINE_FIELD: Creating read methods for datasets and attributes
 *
 * The \ref DEFINE_FIELD macro takes the following main inputs:
 *
 *  * ``name``: The name of the function to generate.
 *  * ``storageObjectType`` : One of either \ref AQNWB::NWB::DatasetField "DatasetField" or
 *    \ref AQNWB::NWB::AttributeField "AttributeField" to define the type of storage object used
 *    to store the field.
 *  * ``default_type`` : The default data type to use. If not known, we can use ``std::any``.
 *	* ``fieldPath`` : Literal string with the relative path to the field within the schema of the
 *     respective neurodata_type. This is automatically being expanded at runtime to the full path.
 *  * ``description`` : Description of the field to include in the docstring for the docs
 *
 * All of these inputs are required. A typical example will look as follows:
 *
 * @code
 * DEFINE_FIELD(getData, DatasetField, float, "data", The main data)
 * @endcode
 *
 * The compiler will then expand this definition to create a new method
 * (here called ``getData``) that will return a  \ref AQNWB::IO::ReadDataWrapper "ReadDataWrapper"
 * for lazy reading for the field. The corresponding expanded function will look something like:
 *
 * @code
 * template<typename VTYPE = float>
 * inline std::unique_ptr<IO::ReadDataWrapper<DatasetField, VTYPE>> getData() const
 * {
 *     return std::make_unique<IO::ReadDataWrapper<DatasetField, VTYPE>>(
 *          m_io,
 *          AQNWB::mergePaths(m_path, fieldPath));
 * }
 * @endcode
 *
 * See \ref read_page for an example of how to use such methods (e.g.,
 * \ref AQNWB::NWB::TimeSeries::readData "TimeSeries::readData" )
 * for reading data fields from a file.
 *
 * \subsection use_the_define_registered_field_macro DEFINE_REGISTERED_FIELD: Defining read methods for neurodata_type objects
 *
 * The \ref DEFINE_REGISTERED_FIELD macro works much like the \ref DEFINE_FIELD macro macro but 
 * returns instances of specific subtypes of \ref AQNWB::NWB::RegisteredType "RegisteredType", 
 * rather than \ref AQNWB::IO::ReadDataWrapper "ReadDataWrapper". As such the main inputs for 
 * \ref DEFINE_REGISTERED_FIELD are as follows:
 *
 *  * ``name``: The name of the function to generate.
 *  * ``registeredType`` : The specific subclass of \ref AQNWB::NWB::RegisteredType "RegisteredType" to use 
 *	* ``fieldPath`` : Literal string with the relative path to the field within the schema of the
 *     respective neurodata_type. This is automatically being expanded at runtime to the full path.
 *  * ``description`` : Description of the field to include in the docstring for the docs
 *
 * All of these inputs are required. A typical example will look as follows:
 *
 * @code
 * DEFINE_REGISTERED_FIELD(getMyTable, DynamicTable, "my_table", My data table)
 * @endcode
 *
 * The compiler will then expand this definition to create a new read method, in this 
 * called ``getMyTable`` that returns a \ref AQNWB::NWB::DynamicTable "DynamicTable"
 * for reading "my_table". The corresponding expanded function will look something like:
 *
 * @code
 * template<typename RTYPE = DynamicTable> 
 * inline std::shared_ptr<RTYPE> getMyTable() const 
 * { 
 *   std::string objectPath = AQNWB::mergePaths(m_path, fieldPath); 
 *   if (m_io->objectExists(objectPath)) { 
 *     return RegisteredType::create<RTYPE>(objectPath, m_io); 
 *   } 
 *   return nullptr; 
 * }
 * @endcode
 *
 * \subsection use_the_define_referenced_registered_field_macro DEFINE_REFERENCED_REGISTERED_FIELD: Defining read methods for references to neurodata_type objects
 *
 * The \ref DEFINE_REFERENCED_REGISTERED_FIELD macro works exactly like the 
 * \ref DEFINE_REGISTERED_FIELD macro, but the underlying data is an attribute that 
 * stores a reference to an instances of a specific subtype of \ref AQNWB::NWB::RegisteredType "RegisteredType"
 * rather than the instance of the object directly. I.e., ``fieldPath`` here is the
 * relative path to the attribute that stores the reference, rather than the relative path
 * of the object itself. The generated read method then resolves the reference first and
 * then returns the instance of the object that is being referenced.
 *
 *
 * \section using_registered_subclass_with_typename How to implement a RegisteredType with a custom type name 
 *
 * In most cases, the name of our \ref AQNWB::NWB::RegisteredType "RegisteredType" class should be
 * the same as the `neurodata_type`. However, in some cases this may not be possible. 
 * In this case, we need to use \ref REGISTER_SUBCLASS_WITH_TYPENAME macro instead of 
 * \ref REGISTER_SUBCLASS. E.g. using
 * ``REGISTER_SUBCLASS_WITH_TYPENAME(ElectrodeTable, "core", "DynamicTable")``, 
 * the class will be registered in the registry,  under the ``core::ElectrodesTable`` key, 
 * but with "DynamicTable" as the typename value and the `ElectrodesTable.getTypeName` 
 * automatic override returning the indicated typename instead of the classname.
 * The main use cases for this are to implement:
 *
 * 1. Templated child classes of \ref AQNWB::NWB::RegisteredType "RegisteredType"
 *    where the template parameters required in C++ are not part  of the `neurodata_type` name in NWB. 
 *    An example is \ref AQNWB::NWB::VectorData "VectorData" which uses a template parameter to define the 
 *    data type of data that is manages. 
 * 2. A class for a modified type that does not have its  own `neurodata_type` 
 *    in the NWB schema. An example is `ElectrodesTable` in NWB <v2.7, which
 *    did not have an assigned `neurodata_type`, but was implemented as a regular
 *    `DynamicTable`. To allow us to define a class `ElectrodeTable` to help with writing the table
 *    we can then use ``REGISTER_SUBCLASS_WITH_TYPENAME(ElectrodeTable, "core", "DynamicTable")``
 *    in the \ref AQNWB::NWB::ElectrodeTable "ElectrodeTable" class. This ensures that the `neurodata_type` attribute is set
 *   correctly to `DynamicTable` on write instead of `ElectrodeTable`. 
 *
 * \subsection implement_templated_registered_type Templated RegisteredType Classes
 *
 * In some cases, we may want to use templated classes to handle data types in a type-safe 
 * way. AqNWB uses  templated neurodata_type classes for \ref AQNWB::NWB::VectorDataTyped "VectorDataTyped<DTYPE>" 
 * and \ref AQNWB::NWB::DataTyped "DataTyped<DTYPE>" as these classes manage a particular dataset. Using
 * this approach, we specify the data types to use with the class directly as part of 
 * \ref DEFINE_REGISTERED_FIELD macro so that the user doesn't need to manually specify the data type 
 * for read. To implement the use of templated classes for read, we can take two main approaches
 * by either \ref implement_templated_registered_type_two_classs or \ref implement_templated_registered_type_single_class .
 * 
 * \subsubsection implement_templated_registered_type_two_classs Using a base class and templated child class
 *
 * For the ``VectorData`` type (and ``Data`` type),  AqNWB implements the  \ref AQNWB::NWB::VectorData "VectorData" class, which 
 * exposes the data as ``std::any``  via the \ref AQNWB::NWB::VectorData::readData "VectorData::readData" 
 * method for read. To simplify read, \ref AQNWB::NWB::VectorDataTyped "VectorDataTyped<DTYPE>"
 * inherits from \ref AQNWB::NWB::VectorData "VectorData" but allows the data type to be fixed
 * at compile time via the class template, such that \ref AQNWB::NWB::VectorDataTyped "VectorDataTyped<DTYPE>::readData"
 * can expose the data with the type already set at compile time. 
 * 
 * Using this approach where we have a non-templated base class \ref AQNWB::NWB::VectorData "VectorData" 
 * with a templated child class \ref AQNWB::NWB::VectorDataTyped "VectorDataTyped<DTYPE>", only 
 * the base type \ref AQNWB::NWB::VectorData "VectorData" is being registered with the 
 * \ref AQNWB::NWB::RegisteredType "RegisteredType" registry via the \ref REGISTER_SUBCLASS_IMPL macro. 
 * This is because on read  \ref AQNWB::NWB::RegisteredType::create "RegisteredType::create" can only determine
 * the base type based on the ``namespace`` and ``neurodata_type`` attribute stored in the file. 
 *
 * However, even though \ref AQNWB::NWB::VectorDataTyped "VectorDataTyped<DTYPE>" is not being
 * added to the \ref AQNWB::NWB::RegisteredType "RegisteredType" registry, it does inherit from 
 * \ref AQNWB::NWB::VectorData "VectorData" and as such, a user may chose to use  
 * \ref AQNWB::NWB::VectorDataTyped "VectorDataTyped<DTYPE>" anywhere \ref AQNWB::NWB::VectorData "VectorData" 
 * is being used. In particular, by using \ref AQNWB::NWB::VectorDataTyped "VectorDataTyped<DTYPE>" as part of 
 * the \ref DEFINE_REGISTERED_FIELD macro, we can set the data type for read at compile time, simplifying read. 
 *
 * \subsubsection implement_templated_registered_type_single_class Using a single templated class
 *
 * Alternatively to the above approach, where we have two classes  \ref AQNWB::NWB::VectorData "VectorData" 
 * and  \ref AQNWB::NWB::VectorDataTyped "VectorDataTyped<DTYPE>", we could also just use a single 
 * templated class ``VectorData<DTYPE>`` and then register only the generic version ``VectorData<std::any>``
 * with the type registry via the \ref REGISTER_SUBCLASS_IMPL macro. However, there are a few 
 * additional considerations to keep in mind with this approach:
 *
 * 1. **Preparing for Registration**
 *    ```cpp
 *    REGISTER_SUBCLASS_WITH_TYPENAME(VectorData<DTYPE>, "hdmf-common", "VectorData")
 *    ```
 *    We use `VectorData<DTYPE>` with the template parameter because we want to prepare all possible
 *    instantiations (e.g., `VectorData<int>`, `VectorData<double>`, etc.) for registration
 *
 * 2. **Actual Registration**
 *    ```cpp
 *    template<> REGISTER_SUBCLASS_IMPL(VectorData<std::any>)
 *    ```
 *    This performs the actual registration in the type system. We only register the most generic type
 *    (`std::any`) because in the NWB file, we only store `namespace=hdmf-common` and `neurodata_type=VectorData`
 *    (i.e., the NWB file doesn't have the notion of templates) and the generic type serves as the
 *    default registration. Note, that we need to use ``template<>`` as this is a template specialization. 
 *    
 *    \note 
 *    In C++ the implementation of templated classes is not easily separate into ``.hpp`` and ``.cpp``
 *    files. However, the ``template<> REGISTER_SUBCLASS_IMPL(VectorData<std::any>)`` cannot be part 
 *    of the ``.hpp`` file where the class is being defined. Also, the compiler will only include the 
 *    call if the ``VectorData<std::any>`` is actually being instantiated. A simple instantiation
 *    of ``template class VectorData<std::any>;`` in the ``VectorData.cpp`` may not be sufficient 
 *    for this. As a work-around, the ``template<> REGISTER_SUBCLASS_IMPL(VectorData<std::any>)`` may need to 
 *    be placed in to a different ``.cpp`` file that we know is going to be built. I.e., when using
 *    the approach of a single template class, you should confirm that the registration is being 
 *    executed correctly by creating a unit test that checks that the type has been registered. 
 *
 * 3. **Template Instantiation**
 *    In `VectorData.cpp`:
 *    ```cpp
 *    template class VectorData<std::any>;
 *    template class VectorData<uint8_t>;
 *    template class VectorData<int16_t>;
 *    // ... other types ...
 *    ```
 *    This is an optimization that pre-instantiates all the types we expect to use and 
 *    makes these instantiations part of the AqNWB library. This allows users to use these 
 *    types directly and prevents the compiler from having to generate these as part of 
 *    the user's code build.
 *
 * \subsection limitations_registered_subclass_with_typename Limitations of REGISTER_SUBCLASS_WITH_TYPENAME
 *
 * The main limitaton of the  \ref REGISTER_SUBCLASS_WITH_TYPENAME approach is that on read, AqNWB 
 * will use the default class associated with the `neurodata_type`. E.g., in the case of 
 * the \ref AQNWB::NWB::ElectrodeTable "ElectrodeTable" class, by default the regular 
 * \ref AQNWB::NWB::DynamicTable "DynamicTable" class will be used since that is what 
 * the schema is indicating to use. Similarly, for \ref AQNWB::NWB::VectorData "VectorData" 
 * the default `VectorData<std::any>` will be used on read. To support reading using the
 * more specific types, we can use the \ref DEFINE_REGISTERED_FIELD macro to define
 * read methods that will return the approbriate type, e.g.:
 *
 * \code
 * DEFINE_REGISTERED_FIELD(readElectrodeTable,
 *                         ElectrodeTable,
 *                         ElectrodeTable::electrodeTablePath,
 *                         "table with the extracellular electrodes")
 * \endcode
 *
 * in \ref AQNWB::NWB::NWBFile "NWBFile" to read the \ref AQNWB::NWB::ElectrodeTable "ElectrodeTable",
 * or 
 *
 * \code
 * DEFINE_REGISTERED_FIELD(
 *     readGroupNameColumn,
 *     VectorData<std::string>,
 *     "group_name",
 *     "the name of the ElectrodeGroup this electrode is a part of")
 * \endcode
 *
 * in the \ref AQNWB::NWB::ElectrodeTable "ElectrodeTable" to read the `group_name` column
 * as `VectorData<std::string>` with the data type already specified as `std::string` at compile time.
 */