/**
 *
 * \page registered_type_page Implementing a new Neurodata Type
 *
 * \tableofcontents
 *
 *
 *
 * New neurodata_types typically inherit from at least either \ref AQNWB::NWB::Container "Container"
 * or \ref AQNWB::NWB::Data "Data", or a more specialized type of the two. In any case,
 * all classes that represent a ``neurodata_type`` defined in the schema should be implemented
 * as a subtype of \ref AQNWB::NWB::RegisteredType "RegisteredType".
 *
 * @section implement_registered_type How to Implement a RegisteredType
 *
 * To implement a subclass of \ref AQNWB::NWB::RegisteredType "RegisteredType", follow these steps:
 *
 * 1. Include the `RegisteredType.hpp` header file in your subclass header file.
 *    @code
 *    #include "nwb/RegisteredType.hpp"
 *    @endcode
 *
 * 2. Define your subclass by inheriting from \ref AQNWB::NWB::RegisteredType "RegisteredType".
 *    Ensure that your subclass implements a constructor with the arguments
 *    `(const std::string& path, std::shared_ptr<IO::BaseIO> io)`,
 *    as the "create" method expects this constructor signature.
 *    @code
 *    class MySubClass : public AQNWB::NWB::RegisteredType {
 *    public:
 *        MySubClass(const std::string& path, std::shared_ptr<IO::BaseIO> io)
 *            : RegisteredType(path, io) {}
 *
 *        // Implement any additional methods or overrides here
 *    };
 *    @endcode
 *
 * 3. Use the \ref REGISTER_SUBCLASS macro to register your subclass. This should usually appear in
 *    the header (`hpp`) file as part of the class definition:
 *    @code
 *    REGISTER_SUBCLASS(MySubClass, "my-namespace")
 *    @endcode
 *
 * 4. In the corresponding source (`cpp`) file, initialize the static member to trigger the registration
 *    using the \ref REGISTER_SUBCLASS_IMPL macro:
 *    @code
 *    #include "MySubClass.h"
 *
 *    // Initialize the static member to trigger registration
 *    REGISTER_SUBCLASS_IMPL(MySubClass)
 *    @endcode
 *
 * 5. To define getter methods for lazy read access to datasets and attributes that belong to our type,
 *    we can use the \ref DEFINE_FIELD  macro. This macro creates a standard method for retrieving a
 *    \ref AQNWB::IO::ReadDataWrapper "ReadDataWrapper" for lazy reading for the field:
 *    @code
 *    DEFINE_FIELD(getData, DatasetField, float, "data", The main data)
 *    @endcode
 *
 * 6. Similarly, we use the \ref DEFINE_REGISTERED_FIELD macro to define getter methods for other 
 *    \ref AQNWB::NWB::RegisteredType "RegisteredType" objects that we own, such as a
 *     \ref AQNWB::NWB::ElectrodeTable "ElectrodeTable" that owns 
 *    predefined \ref AQNWB::NWB::VectorData "VectorData" columns:
 *    @code
 *    DEFINE_REGISTERED_FIELD(readGroupNameColumn, VectorData<std::string>, "group_name", "the name of the ElectrodeGroup")
 *    @endcode
 *
 *
 * \warning
 * To ensure proper function on read, the name of the class should match the name of the
 * ``neurodata_type`` as defined in the schema. Similarly, "my-namespace" should match
 * the name of the namespace in the schema (e.g., "core", "hdmf-common"). In this way
 * we can look up the corresponding class for an object in a file based on the
 * ``neurodata_type`` and ``namespace`` attributes stored in the file.
 * A special version of the ``REGISTER_SUBCLASS`` macro, called ``REGISTER_SUBCLASS_WITH_TYPENAME``,
 * allows setting the typename explicitly as a third argument. This is for the **special case**
 * where the name of the class cannot be the same as the name of the type (e.g,. when implementing
 * a class for schema that doesn't have an assigned type in the schema or a class that requires
 * template parameters that are not part of the type name). See \ref using_registered_subclass_with_typename
 * for details. 
 *
 * \note
 * ``DEFINE_FIELD`` and ``DEFINE_REGISTERED_FIELD`` create templated, non-virtual read 
 * functions. This means if we want to "redefine" a field in a child class by calling 
 * ``DEFINE_FIELD`` again, then the function will be "hidden" instead of "override". 
 * This is important to remember when casting a pointer to a base type, as in this case 
 * the implementation from the base type will be used since the function created 
 * by ``DEFINE_FIELD`` is not virtual.
 *
 *
 * @subsection implement_registered_type_example Example: Implementing a new type
 *
 * *MySubClass.hpp*
 * @code
 * #pragma once
 * #include "RegisteredType.hpp"
 *
 * class MySubClass : public AQNWB::NWB::RegisteredType
 * {
 * public:
 *     MySubClass(const std::string& path, std::shared_ptr<IO::BaseIO> io)
 *         : RegisteredType(path, io) {}
 *
 *     DEFINE_FIELD(getData, DatasetField, float, "data", The main data)
 *
 *     REGISTER_SUBCLASS(MySubClass, "my-namespace")
 * };
 * @endcode
 *
 * *MySubClass.cpp*
 * @code
 * #include "MySubClass.h"
 *
 * // Initialize the static member to trigger registration
 * REGISTER_SUBCLASS_IMPL(MySubClass)
 * @endcode
 *
 * @section type_registry How the Type Registry in RegisteredType Works
 *
 * The type registry in \ref AQNWB::NWB::RegisteredType "RegisteredType" allows for dynamic creation of registered subclasses by name. Here is how it works:
 *
 * 1. **Registry Storage**:
 *    - The registry is implemented using 1) an `std::unordered_set` to store subclass names (which can be
 *      accessed via \ref AQNWB::NWB::RegisteredType::getRegistry "getRegistry()") and
 *      2) an `std::unordered_map` to store factory functions for creating instances of the subclasses
 *      (which can be accessed via \ref AQNWB::NWB::RegisteredType::getFactoryMap() "getFactoryMap()").
 *      The factory methods are the required constructor that uses the io and path as input.
 *    - These are defined as static members within the \ref AQNWB::NWB::RegisteredType "RegisteredType" class.
 *
 * 2. **Registration**:
 *    - The \ref AQNWB::NWB::RegisteredType::registerSubclass "registerSubclass" method is used to add a
 *      subclass name and its corresponding factory function to the registry.
 *    - This method is called via the `REGISTER_SUBCLASS` macro, which defines a static method (`registerSubclass()`)
 *      and static member (`registered_`) to trigger the registration when the subclass is loaded.
 *
 * 3. **Dynamic Creation**:
 *    - The \ref AQNWB::NWB::RegisteredType::create "create" method is used to create an instance of a registered subclass by name.
 *    - This method looks up the subclass name in the registry and calls the corresponding factory function to create an instance.
 *
 * 4. **Automatic Registration**:
 *    - The `REGISTER_SUBCLASS_IMPL` macro initializes the static member (`registered_`), which triggers the
 *      \ref AQNWB::NWB::RegisteredType::registerSubclass "registerSubclass" method
 *      and ensures that the subclass is registered when the program starts.
 *
 * 5. **Class Name and Namespace Retrieval**:
 *    - The \ref AQNWB::NWB::RegisteredType::getTypeName "getTypeName" and
 *      \ref AQNWB::NWB::RegisteredType::getNamespace "getNamespace" return the string name of the
 *      class and namespace, respectively. The `REGISTER_SUBCLASS` macro implements an automatic
 *      override of the methods to ensure the appropriate type and namespace string are returned.
 *      These methods should, hence, not be manually overridden by subclasses, to ensure consistency
 *      in type identification.
 *
 *
 * @section use_registered_type_registry How to Use the RegisteredType Registry
 *
 * The \ref AQNWB::NWB::RegisteredType "RegisteredType" registry allows for dynamic creation and management of registered subclasses. Here is how you can use it:
 *
 * 1. **Creating Instances Dynamically**:
 *    - Use the \ref AQNWB::NWB::RegisteredType::create "create" method to create an instance of a registered subclass by name.
 *    - This method takes the subclass name, path, and a shared pointer to the IO object as arguments. This
 *      illustrates how we can read a specific typed object in an NWB file.
 *    \snippet tests/examples/test_RegisteredType_example.cpp example_RegisterType_get_type_instance
 *
 * 2. **Retrieving Registered Subclass Names**:
 *    - Use the \ref AQNWB::NWB::RegisteredType::getRegistry "getRegistry" method to retrieve the
 *      set of registered subclass names.
 *      \snippet tests/examples/test_RegisteredType_example.cpp example_RegisterType_get_registered_names
 *
 * 3. **Retrieving the Factory Map**:
 *    - Use the \ref AQNWB::NWB::RegisteredType::getFactoryMap "getFactoryMap" method to retrieve
 *      the map of factory functions for creating instances of registered subclasses.
 *      \snippet tests/examples/test_RegisteredType_example.cpp example_RegisterType_get_registered_factories
 *
 * @subsection use_registered_type_registry_example Example: Using the type registry
 *
 *  \snippet tests/examples/test_RegisteredType_example.cpp example_RegisterType_full
 *
 * @section use_the_define_field_macro How to use the DEFINE_FIELD macro
 *
 * The \ref DEFINE_FIELD macro takes the following main inputs:
 *
 *  * ``name``: The name of the function to generate.
 *  * ``storageObjectType`` : One of either \ref AQNWB::NWB::DatasetField "DatasetField" or
 *    \ref AQNWB::NWB::AttributeField "AttributeField" to define the type of storage object used
 *    to store the field.
 *  * ``default_type`` : The default data type to use. If not known, we can use ``std::any``.
 *	* ``fieldPath`` : Literal string with the relative path to the field within the schema of the
 *     respective neurodata_type. This is automatically being expanded at runtime to the full path.
 *  * ``description`` : Description of the field to include in the docstring for the docs
 *
 * All of these inputs are required. A typical example will look as follows:
 *
 * @code
 * DEFINE_FIELD(getData, DatasetField, float, "data", The main data)
 * @endcode
 *
 * The compiler will then expand this definition to create a new method
 * called ``getData`` that will return a  \ref AQNWB::IO::ReadDataWrapper "ReadDataWrapper"
 * for lazy reading for the field. The corresponding expanded function will look something like:
 *
 * @code
 * template<typename VTYPE = float>
 * inline std::unique_ptr<IO::ReadDataWrapper<DatasetField, VTYPE>> getData() const
 * {
 *     return std::make_unique<IO::ReadDataWrapper<DatasetField, VTYPE>>(
 *          m_io,
 *          AQNWB::mergePaths(m_path, fieldPath));
 * }
 * @endcode
 *
 * See \ref read_page for an example of how to use such methods (e.g.,
 * \ref AQNWB::NWB::TimeSeries::readData "TimeSeries::readData" )
 * for reading data fields from a file.
 *
 * @section use_the_define_registered_field_macro How to use the DEFINE_REGISTERED_FIELD macro
 *
 * The \ref DEFINE_REGISTERED_FIELD works much like the \ref DEFINE_FIELD macro macro but 
 * returns instances of specific subtypes of \ref AQNWB::NWB::RegisteredType "RegisteredType", 
 * rather than \ref AQNWB::IO::ReadDataWrapper "ReadDataWrapper". As such the main inputs for 
 * \ref DEFINE_REGISTERED_FIELD are as follows:
 *
 *  * ``name``: The name of the function to generate.
 *  * ``registeredType`` : The specific subclass of \ref AQNWB::NWB::RegisteredType "RegisteredType" to use 
 *	* ``fieldPath`` : Literal string with the relative path to the field within the schema of the
 *     respective neurodata_type. This is automatically being expanded at runtime to the full path.
 *  * ``description`` : Description of the field to include in the docstring for the docs
 *
 * All of these inputs are required. A typical example will look as follows:
 *
 * @code
 * DEFINE_REGISTERED_FIELD(getData, DynamicTable, "my_table", My data table)
 * @endcode
 *
 * @section using_registered_subclass_with_typename Using REGISTER_SUBCLASS_WITH_TYPENAME
 *
 * The main use case for \ref REGISTER_SUBCLASS_WITH_TYPENAME is when we need to implement
 * a class for type where the name of the class does not match the type name. E.g. using
 * ``REGISTER_SUBCLASS_WITH_TYPENAME(ElectrodeTable, "core", "DynamicTable")``, 
 * the class will be registered tn the registry,  under the ``core::ElectrodesTable`` key, 
 * but with "DynamicTable" as the typename value and the `ElectrodesTable.getTypeName` 
 * automatic override returning the indicated typename instead of the classname.
 * The main use cases for this are to:
 *
 * * Implement a class for a modified type that does not have its  own `neurodata_type` 
 *   in the NWB schema. An example is `ElectrodesTable` in NWB <v2.7, which
 *   did not have an assigned `neurodata_type`, but was implemented as a regular
 *   `DynamicTable`. To allow us to define a class `ElectrodeTable` to help with writing the table
 *   we can then use ``REGISTER_SUBCLASS_WITH_TYPENAME(ElectrodeTable, "core", "DynamicTable")``
 *   in the \ref AQNWB::NWB::ElectrodeTable "ElectrodeTable" class. This ensures that the `neurodata_type` attribute is set
 *   correctly to `DynamicTable` on write instead of `ElectrodeTable`. 
 * * Another example is where the class may require template parameters in C++. The 
 *   template parameters are required in C++ but are not part of the `neurodata_type`. 
 *   An example is \ref AQNWB::NWB::VectorData "VectorData" which uses a template parameter to define the 
 *   data type of data that is manages. 
 *
 * @subsection limitations_registered_subclass_with_typename Limitations of REGISTER_SUBCLASS_WITH_TYPENAME
 *
 * The main limitaton of the  \ref REGISTER_SUBCLASS_WITH_TYPENAME approach is that on read, AqNWB 
 * will use the default class associated with the `neurodata_type`. E.g., in the case of 
 * the \ref AQNWB::NWB::ElectrodeTable "ElectrodeTable" class, by default the regular 
 * \ref AQNWB::NWB::DynamicTable "DynamicTable" class will be used since that is what 
 * the schema is indicating to use. Similarly, for \ref AQNWB::NWB::VectorData "VectorData" 
 * the default `VectorData<std::any>` will be used on read. To support reading using the
 * more specific types, we can use the \ref DEFINE_REGISTERED_FIELD macro to define
 * read methods that will return the approbriate type, e.g.:
 *
 * \code
 * DEFINE_REGISTERED_FIELD(readElectrodeTable,
 *                         ElectrodeTable,
 *                         ElectrodeTable::electrodeTablePath,
 *                         "table with the extracellular electrodes")
 * \endcode
 *
 * in \ref AQNWB::NWB::NWBFile "NWBFile" to read the \ref AQNWB::NWB::ElectrodeTable "ElectrodeTable",
 * or 
 *
 * \code
 * DEFINE_REGISTERED_FIELD(
 *     readGroupNameColumn,
 *     VectorData<std::string>,
 *     "group_name",
 *     "the name of the ElectrodeGroup this electrode is a part of")
 * \endcode
 *
 * in the \ref AQNWB::NWB::ElectrodeTable "ElectrodeTable" to read the `group_name` column
 * as `VectorData<std::string>` with the data type already specified as `std::string` at compile time.
 *
 *
 */