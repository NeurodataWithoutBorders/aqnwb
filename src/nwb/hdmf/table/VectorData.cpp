#include "nwb/hdmf/table/VectorData.hpp"

namespace AQNWB::NWB
{
// Explicitly register the Data<std::any> specialization with the type registry.
// This ensures that the most generic specialization is available for dynamic
// creation with RegisteredType::create. The REGISTER_SUBCLASS_IMPL macro
// initializes the static member to trigger the registration.
template<>
REGISTER_SUBCLASS_IMPL(VectorData<std::any>)

// Explicitly instantiate the Data template for all common data types.
// This ensures that these specializations are generated by the compiler,
// reducing compile times and ensuring availability throughout the program.
template class VectorData<std::any>;
template class VectorData<uint8_t>;
template class VectorData<uint16_t>;
template class VectorData<uint32_t>;
template class VectorData<uint64_t>;
template class VectorData<int8_t>;
template class VectorData<int16_t>;
template class VectorData<int32_t>;
template class VectorData<int64_t>;
template class VectorData<float>;
template class VectorData<double>;
template class VectorData<std::string>;
}  // namespace AQNWB::NWB
