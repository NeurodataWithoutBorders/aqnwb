#include "nwb/hdmf/base/Data.hpp"

using namespace AQNWB::NWB;

// Register the base Data class
REGISTER_SUBCLASS_IMPL(Data)

/** Constructor */
Data::Data(const std::string& path, std::shared_ptr<AQNWB::IO::BaseIO> io)
    : RegisteredType(path, io)
{
}

Status Data::initialize(const IO::ArrayDataSetConfig& dataConfig)
{
    // Call RegisteredType::initialize() to add this object to RecordingObjects
    auto registerStatus = registerRecordingObject();
    auto ioPtr = getIO();
    if (ioPtr == nullptr) {
        std::cerr << "IO object has been deleted. Can't initialize Data: "
                << m_path << std::endl;
        return Status::Failure;
    }
    // Create the dataset
    auto dataset = ioPtr->createArrayDataSet(dataConfig, this->m_path);
    if (dataset == nullptr) {
        return Status::Failure;
    }
    // setup common attributes
    Status commonAttrsStatus = ioPtr->createCommonNWBAttributes(
        m_path, this->getNamespace(), this->getTypeName());
    return commonAttrsStatus && registerStatus;
}

namespace AQNWB::NWB
{

// Explicitly instantiate the DataTyped template for all common data types.
// This ensures that these specializations are generated by the compiler,
// reducing compile times and ensuring availability throughout the program.
template class DataTyped<std::any>;
template class DataTyped<uint8_t>;
template class DataTyped<uint16_t>;
template class DataTyped<uint32_t>;
template class DataTyped<uint64_t>;
template class DataTyped<int8_t>;
template class DataTyped<int16_t>;
template class DataTyped<int32_t>;
template class DataTyped<int64_t>;
template class DataTyped<float>;
template class DataTyped<double>;
template class DataTyped<std::string>;
}  // namespace AQNWB::NWB
